

This C program does the following:

Prompts the user to enter a score.
Reads the score from standard input.
Checks the score against the specified conditions and assigns a grade.
Prints the grade to the console.


printf: This is a standard output function provided by the C Standard Library (specifically, stdio.h) that prints formatted output to the standard output stream (stdout).

scanf: This is a standard input function provided by the C Standard Library (specifically, stdio.h) that reads formatted input from the standard input stream (stdin).

"%d": This is the format specifier that tells scanf to expect an integer value. The %d format specifier indicates that the input should be read as a decimal integer.

&userScore: This is the address-of operator (&) applied to the variable userScore. It tells scanf where to store the input value. 
The scanf function needs the address of the variable because it will write the input value directly into that variable.

%c\n": This is the format string that specifies how the output should be formatted. It contains the following elements: %c and \n.

%c: This is a format specifier that tells printf to expect a character value and to print it. The %c format specifier is used to print a single character.

\n: This is an escape sequence that represents a newline character, which moves the cursor to the beginning of the next line in the console.


In summary, scanf("%d", &userScore); reads an integer value from the user input and stores it in the userScore variable. 
The & operator is necessary because scanf requires a pointer to the variable where the input data should be stored.

In summary, printf("The grade is: %c\n", displayScore); prints the string "The grade is: " followed by the character stored in the displayScore variable and then a newline character.








Follow this instruction to run your code.>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

-- open your terminal and navigate to the directory folder where the code or project is located using this command like this:  cd "/path/to/your/source/code/"

-- once you are in the directory folder where the code or project is located use this command to compile your code like this:   gcc -o score_grading_app score_grading_app.c

-- then use ./ followed by the project name anytime you want to run the compiled program like this:   ./score_grading_app






Step-by-Step Explanation

1. Changing the Directory:    cd "/path/to/your/source/code/"

The `cd` command stands for "change directory." This command is used to change the current working directory to the specified path. In this example, `"/path/to/your/source/code/"` is a placeholder for the actual path where your source code file (`score_grading_app.c`) is located. You need to replace this with the actual path on your system.


- Example:
cd "/Users/2nde/Desktop/MIVA/Computer Science/100 L/Score grading system using C programing language/"
     




2. Compiling the C Program:    gcc -o score_grading_app score_grading_app.c


The `gcc` command stands for "GNU Compiler Collection." This command is used to compile C (and other languages) programs. Here's a breakdown of the options and arguments:

 - `gcc`: The command to invoke the GCC compiler.
 - `-o score_grading_app`: This option specifies the name of the output file (the compiled executable). In this case, the output file will be named `score_grading_app`.
 - `score_grading_app.c`: This is the name of the source code file you want to compile. It should contain your C code.
 
 When you run this command, GCC will compile the `score_grading_app.c` file and create an executable file named `score_grading_app` in the same directory.





3. Running the Compiled Program:    ./score_grading_app

The `./` before `score_grading_app` indicates that you want to run an executable file located in the current directory. The `score_grading_app` is the name of the executable file that was created by the GCC compiler in the previous step.


When you run this command, the operating system will execute the `score_grading_app` program, and you should see the output of your C program in the terminal.





Summary

- cd "/path/to/your/source/code/": Changes the current working directory to the location of your source code.
- gcc -o score_grading_app score_grading_app.c: Compiles the C source code file `score_grading_app.c` and produces an executable named `score_grading_app`.
- ./score_grading_app: Runs the compiled executable program.

This sequence of commands is a common workflow for compiling and running a C program from the command line. 
Make sure to replace `"/path/to/your/source/code/"` with the actual path to your source code directory on your system.